<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Xml" #> 
<#@ import namespace="System.Xml.Linq" #> 
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #><#
    var templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    var parentDirectory = (Directory.GetParent(templateDirectory)).FullName;
    var rootDirectory = (Directory.GetParent(parentDirectory)).FullName;

    var xml = XDocument.Load(Path.Combine(parentDirectory, "Table Metadata.xml"));

    var query = from c in xml.Descendants("table") 
                select new {
                    name = c.Attribute("name").Value ,
                    type = c.Attribute("type").Value ,
                    schema = c.Attribute("schema").Value 
                };
    
    foreach (var item in query) {
        
        if(item.type == "prime") {
            var tableName = item.name;

            string templateFileName = "Create XML Data.tt";
            string outputFilePath = Path.Combine(rootDirectory, "Prime Data\\" + item.schema + '.' + tableName + ".xml");  

            TextTemplatingSession session = new TextTemplatingSession();
            session["TableName"] = tableName;
            session["SchemaName"] = item.schema;

            var sessionHost = (ITextTemplatingSessionHost) this.Host;
            sessionHost.Session = session;

            string template = File.ReadAllText(Host.ResolvePath(templateFileName));
            Engine engine = new Engine();
            string output = engine.ProcessTemplate(template, this.Host);  

            output = output.TrimStart('\r', '\n');
            
            File.WriteAllText(outputFilePath, output);
        }
    }
#><#+

#>